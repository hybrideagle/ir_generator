/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./input_examples/assign_expr.json":
/*!*****************************************!*\
  !*** ./input_examples/assign_expr.json ***!
  \*****************************************/
/*! exports provided: type, operator, left, right, default */
/***/ (function(module) {

eval("module.exports = {\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\"},\"right\":{\"type\":\"Literal\",\"kind\":\"int\",\"value\":\"1\"}};\n\n//# sourceURL=webpack:///./input_examples/assign_expr.json?");

/***/ }),

/***/ "./input_examples/do_while.json":
/*!**************************************!*\
  !*** ./input_examples/do_while.json ***!
  \**************************************/
/*! exports provided: type, body, test, default */
/***/ (function(module) {

eval("module.exports = {\"type\":\"DoWhileStatement\",\"body\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Identifier\",\"name\":\"x\"},\"operator\":\"+\"}},\"test\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Literal\",\"kind\":\"int\",\"value\":\"10\"},\"operator\":\"<\"}};\n\n//# sourceURL=webpack:///./input_examples/do_while.json?");

/***/ }),

/***/ "./input_examples/expression.json":
/*!****************************************!*\
  !*** ./input_examples/expression.json ***!
  \****************************************/
/*! exports provided: type, expression, default */
/***/ (function(module) {

eval("module.exports = {\"type\":\"Expression\",\"expression\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"x2\"},\"operator\":\"+\"},\"operator\":\"+\",\"right\":{\"type\":\"Identifier\",\"name\":\"x3\"}},\"operator\":\"+\",\"right\":{\"type\":\"Identifier\",\"name\":\"x4\"}}};\n\n//# sourceURL=webpack:///./input_examples/expression.json?");

/***/ }),

/***/ "./input_examples/for_loop.json":
/*!**************************************!*\
  !*** ./input_examples/for_loop.json ***!
  \**************************************/
/*! exports provided: type, init, test, update, body, default */
/***/ (function(module) {

eval("module.exports = {\"type\":\"ForStatement\",\"init\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Literal\",\"kind\":\"int\",\"value\":\"10\"}},\"test\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Literal\",\"kind\":\"int\",\"value\":\"10\"},\"operator\":\"<\"},\"update\":{\"type\":\"UnaryExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"a\"},\"prefix\":\"false\"},\"body\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Literal\",\"kind\":\"int\",\"value\":\"10\"},\"operator\":\"+\"}}}};\n\n//# sourceURL=webpack:///./input_examples/for_loop.json?");

/***/ }),

/***/ "./input_examples/if_else.json":
/*!*************************************!*\
  !*** ./input_examples/if_else.json ***!
  \*************************************/
/*! exports provided: type, test, consequent, alternative, default */
/***/ (function(module) {

eval("module.exports = {\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Literal\",\"kind\":\"int\",\"value\":\"10\"},\"operator\":\"<\"},\"consequent\":{\"type\":\"WhileStatement\",\"test\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Literal\",\"kind\":\"int\",\"value\":\"10\"},\"operator\":\"<\"},\"body\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Identifier\",\"name\":\"x\"},\"operator\":\"+\"}}},\"alternative\":{\"type\":\"WhileStatement\",\"test\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Literal\",\"kind\":\"int\",\"value\":\"10\"},\"operator\":\">\"},\"body\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Identifier\",\"name\":\"x\"},\"operator\":\"-\"}}}};\n\n//# sourceURL=webpack:///./input_examples/if_else.json?");

/***/ }),

/***/ "./input_examples/while_loop.json":
/*!****************************************!*\
  !*** ./input_examples/while_loop.json ***!
  \****************************************/
/*! exports provided: type, test, body, default */
/***/ (function(module) {

eval("module.exports = {\"type\":\"WhileStatement\",\"test\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Literal\",\"kind\":\"int\",\"value\":\"10\"},\"operator\":\"<\"},\"body\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\"},\"right\":{\"type\":\"Identifier\",\"name\":\"x\"},\"operator\":\"+\"}}};\n\n//# sourceURL=webpack:///./input_examples/while_loop.json?");

/***/ }),

/***/ "./node_modules/assert/assert.js":
/*!***************************************!*\
  !*** ./node_modules/assert/assert.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = __webpack_require__(/*! util/ */ \"./node_modules/util/util.js\");\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/assert/assert.js?");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/path-browserify/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/treant-js/Treant.js":
/*!******************************************!*\
  !*** ./node_modules/treant-js/Treant.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\r\n* Treant-js\r\n*\r\n* (c) 2013 Fran Peručić\r\n* Treant-js may be freely distributed under the MIT license.\r\n* For all details and documentation:\r\n* http://fperucic.github.io/treant-js\r\n*\r\n* Treant is an open-source JavaScipt library for visualization of tree diagrams.\r\n* It implements the node positioning algorithm of John Q. Walker II \"Positioning nodes for General Trees\".\r\n*\r\n* References:\r\n* Emilio Cortegoso Lobato: ECOTree.js v1.0 (October 26th, 2006)\r\n*\r\n*/\r\n\r\n;(function( exports ){\r\n\r\n\tvar UTIL = {\r\n\t\tinheritAttrs: function(me, from) {\r\n\t\t\tfor (var attr in from) {\r\n\t\t\t\tif(typeof from[attr] !== 'function') {\r\n\t\t\t\t\tif(me[attr] instanceof Object && from[attr] instanceof Object) {\r\n\t\t\t\t\t\tthis.inheritAttrs(me[attr], from[attr]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tme[attr] = from[attr];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcreateMerge: function(obj1, obj2) {\r\n\t\t\tvar newObj = {};\r\n\t\t\tif(obj1) this.inheritAttrs(newObj, this.cloneObj(obj1));\r\n\t\t\tif(obj2) this.inheritAttrs(newObj, obj2);\r\n\t\t\treturn newObj;\r\n\t\t},\r\n\r\n\t\tcloneObj: function (obj) {\r\n\t\t\tif (Object(obj) !== obj) {\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t\tvar res = new obj.constructor();\r\n\t\t\tfor (var key in obj) if (obj[\"hasOwnProperty\"](key)) {\r\n\t\t\t\tres[key] = this.cloneObj(obj[key]);\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t},\r\n\t\taddEvent: function(el, eventType, handler) {\r\n\t\t\tif (el.addEventListener) { // DOM Level 2 browsers\r\n\t\t\t\tel.addEventListener(eventType, handler, false);\r\n\t\t\t} else if (el.attachEvent) { // IE <= 8\r\n\t\t\t\tel.attachEvent('on' + eventType, handler);\r\n\t\t\t} else { // ancient browsers\r\n\t\t\t\tel['on' + eventType] = handler;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\thasClass: function(element, my_class) {\r\n\t\t\treturn (\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(\" \"+my_class+\" \") > -1;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* ImageLoader constructor.\r\n\t* ImageLoader is used for determening if all the images from the Tree are loaded.\r\n\t* \tNode size (width, height) can be correcty determined only when all inner images are loaded\r\n\t*/\r\n\tvar ImageLoader = function() {\r\n\t\tthis.loading = [];\r\n\t};\r\n\r\n\r\n\tImageLoader.prototype = {\r\n\t\tprocessNode: function(node) {\r\n\t\t\tvar images = node.nodeDOM.getElementsByTagName('img'),\r\n\t\t\t\ti =\timages.length;\r\n\t\t\twhile(i--) {\r\n\t\t\t\tthis.create(node, images[i]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tremoveAll: function(img_src) {\r\n\t\t\tvar i = this.loading.length;\r\n\t\t\twhile (i--) {\r\n\t\t\t\tif (this.loading[i] === img_src) { this.loading.splice(i,1); }\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcreate: function (node, image) {\r\n\r\n\t\t\tvar self = this,\r\n\t\t\t\tsource = image.src;\r\n\t\t\tthis.loading.push(source);\r\n\r\n\t\t\tfunction imgTrigger() {\r\n\t\t\t\tself.removeAll(source);\r\n\t\t\t\tnode.width = node.nodeDOM.offsetWidth;\r\n\t\t\t\tnode.height = node.nodeDOM.offsetHeight;\r\n\t\t\t}\r\n\r\n\t\t\tif (image.complete) { return imgTrigger(); }\r\n\r\n\t\t\tUTIL.addEvent(image, 'load', imgTrigger);\r\n\t\t\tUTIL.addEvent(image, 'error', imgTrigger); // handle broken url-s\r\n\r\n\t\t\t// load event is not fired for cached images, force the load event\r\n\t\t\timage.src += \"?\" + new Date().getTime();\r\n\t\t},\r\n\t\tisNotLoading: function() {\r\n\t\t\treturn this.loading.length === 0;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Class: TreeStore\r\n\t* TreeStore is used for holding initialized Tree objects\r\n\t* \tIts purpose is to avoid global variables and enable multiple Trees on the page.\r\n\t*/\r\n\r\n\tvar TreeStore = {\r\n\t\tstore: [],\r\n\t\tcreateTree: function(jsonConfig) {\r\n\t\t\tthis.store.push(new Tree(jsonConfig, this.store.length));\r\n\t\t\treturn this.store[this.store.length - 1]; // return newly created tree\r\n\t\t},\r\n\t\tget: function (treeId) {\r\n\t\t\treturn this.store[treeId];\r\n\t\t},\r\n\t\tdestroy: function(tree_id){\r\n\t\t\tvar tree = this.get(tree_id);\r\n\t\t\tif (tree) {\r\n\t\t\t\ttree._R.remove();\r\n\t\t\t\tvar draw_area = tree.drawArea;\r\n\t\t\t\twhile(draw_area.firstChild) {\r\n\t\t\t\t\tdraw_area.removeChild(draw_area.firstChild);\r\n\t\t\t\t}\r\n\t\t\t\tvar classes = draw_area.className.split(' '),\r\n\t\t\t\t\tclasses_to_stay = [];\r\n\t\t\t\tfor (var i = 0; i < classes.length; i++) {\r\n\t\t\t\t\tvar cls = classes[i];\r\n\t\t\t\t\tif (cls != 'Treant' && cls != 'Treant-loaded') {\r\n\t\t\t\t\t\tclasses_to_stay.push(cls);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tdraw_area.style.overflowY = '';\r\n\t\t\t\tdraw_area.style.overflowX = '';\r\n\t\t\t\tdraw_area.className = classes_to_stay.join(' ');\r\n\t\t\t\tthis.store[tree_id] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Tree constructor.\r\n\t*/\r\n\tvar Tree = function (jsonConfig, treeId) {\r\n\r\n\t\tthis.id = treeId;\r\n\r\n\t\tthis.imageLoader = new ImageLoader();\r\n\t\tthis.CONFIG = UTIL.createMerge(Tree.CONFIG, jsonConfig.chart);\r\n\t\tthis.drawArea = document.getElementById(this.CONFIG.container.substring(1));\r\n\t\tthis.drawArea.className += \" Treant\";\r\n\t\tthis.nodeDB = new NodeDB(jsonConfig.nodeStructure, this);\r\n\r\n\t\t// key store for storing reference to node connectors,\r\n\t\t// key = nodeId where the connector ends\r\n\t\tthis.connectionStore = {};\r\n\t};\r\n\r\n\tTree.prototype = {\r\n\r\n\t\tpositionTree: function(callback) {\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tif (this.imageLoader.isNotLoading()) {\r\n\r\n\t\t\t\tvar root = this.root(),\r\n\t\t\t\t\torient = this.CONFIG.rootOrientation;\r\n\r\n\t\t\t\tthis.resetLevelData();\r\n\r\n\t\t\t\tthis.firstWalk(root, 0);\r\n\t\t\t\tthis.secondWalk( root, 0, 0, 0 );\r\n\r\n\t\t\t\tthis.positionNodes();\r\n\r\n\t\t\t\tif (this.CONFIG.animateOnInit) {\r\n\t\t\t\t\tsetTimeout(function() { root.toggleCollapse(); }, this.CONFIG.animateOnInitDelay);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(!this.loaded) {\r\n\t\t\t\t\tthis.drawArea.className += \" Treant-loaded\"; // nodes are hidden until .loaded class is add\r\n\t\t\t\t\tif (Object.prototype.toString.call(callback) === \"[object Function]\") { callback(self); }\r\n\t\t\t\t\tthis.loaded = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(function() { self.positionTree(callback); }, 10);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t* In a first post-order walk, every node of the tree is\r\n\t\t* assigned a preliminary x-coordinate (held in field\r\n\t\t* node->flPrelim). In addition, internal nodes are\r\n\t\t* given modifiers, which will be used to move their\r\n\t\t* children to the right (held in field\r\n\t\t* node->flModifier).\r\n\t\t*/\r\n\t\tfirstWalk: function(node, level) {\r\n\r\n\t\t\tnode.prelim = null; node.modifier = null;\r\n\r\n\t\t\tthis.setNeighbors(node, level);\r\n\t\t\tthis.calcLevelDim(node, level);\r\n\r\n\t\t\tvar leftSibling = node.leftSibling();\r\n\r\n\t\t\tif(node.childrenCount() === 0 || level == this.CONFIG.maxDepth) {\r\n\t\t\t\t// set preliminary x-coordinate\r\n\t\t\t\tif(leftSibling) {\r\n\t\t\t\t\tnode.prelim = leftSibling.prelim + leftSibling.size() + this.CONFIG.siblingSeparation;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode.prelim = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\t//node is not a leaf,  firstWalk for each child\r\n\t\t\t\tfor(var i = 0, n = node.childrenCount(); i < n; i++) {\r\n\t\t\t\t\tthis.firstWalk(node.childAt(i), level + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar midPoint = node.childrenCenter() - node.size() / 2;\r\n\r\n\t\t\t\tif(leftSibling) {\r\n\t\t\t\t\tnode.prelim\t\t= leftSibling.prelim + leftSibling.size() + this.CONFIG.siblingSeparation;\r\n\t\t\t\t\tnode.modifier\t= node.prelim - midPoint;\r\n\t\t\t\t\tthis.apportion( node, level );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode.prelim = midPoint;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// handle stacked children positioning\r\n\t\t\t\tif(node.stackParent) { // hadle the parent of stacked children\r\n\t\t\t\t\tnode.modifier += this.nodeDB.get( node.stackChildren[0] ).size()/2 + node.connStyle.stackIndent;\r\n\t\t\t\t} else if ( node.stackParentId ) { // handle stacked children\r\n\t\t\t\t\tnode.prelim = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t* Clean up the positioning of small sibling subtrees.\r\n\t\t* Subtrees of a node are formed independently and\r\n\t\t* placed as close together as possible. By requiring\r\n\t\t* that the subtrees be rigid at the time they are put\r\n\t\t* together, we avoid the undesirable effects that can\r\n\t\t* accrue from positioning nodes rather than subtrees.\r\n\t\t*/\r\n\t\tapportion: function (node, level) {\r\n\t\t\tvar firstChild\t\t\t\t= node.firstChild(),\r\n\t\t\t\tfirstChildLeftNeighbor\t= firstChild.leftNeighbor(),\r\n\t\t\t\tcompareDepth\t\t\t= 1,\r\n\t\t\t\tdepthToStop\t\t\t\t= this.CONFIG.maxDepth - level;\r\n\r\n\t\t\twhile( firstChild && firstChildLeftNeighbor && compareDepth <= depthToStop ) {\r\n\t\t\t\t// calculate the position of the firstChild, according to the position of firstChildLeftNeighbor\r\n\r\n\t\t\t\tvar modifierSumRight\t= 0,\r\n\t\t\t\t\tmodifierSumLeft\t\t= 0,\r\n\t\t\t\t\tleftAncestor\t\t= firstChildLeftNeighbor,\r\n\t\t\t\t\trightAncestor\t\t= firstChild;\r\n\r\n\t\t\t\tfor(var i = 0; i < compareDepth; i++) {\r\n\r\n\t\t\t\t\tleftAncestor\t\t= leftAncestor.parent();\r\n\t\t\t\t\trightAncestor\t\t= rightAncestor.parent();\r\n\t\t\t\t\tmodifierSumLeft\t\t+= leftAncestor.modifier;\r\n\t\t\t\t\tmodifierSumRight\t+= rightAncestor.modifier;\r\n\t\t\t\t\t// all the stacked children are oriented towards right so use right variables\r\n\t\t\t\t\tif(rightAncestor.stackParent !== undefined) modifierSumRight += rightAncestor.size()/2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// find the gap between two trees and apply it to subTrees\r\n\t\t\t\t// and mathing smaller gaps to smaller subtrees\r\n\r\n\t\t\t\tvar totalGap = (firstChildLeftNeighbor.prelim + modifierSumLeft + firstChildLeftNeighbor.size() + this.CONFIG.subTeeSeparation) - (firstChild.prelim + modifierSumRight );\r\n\r\n\t\t\t\tif(totalGap > 0) {\r\n\r\n\t\t\t\t\tvar subtreeAux = node,\r\n\t\t\t\t\t\tnumSubtrees = 0;\r\n\r\n\t\t\t\t\t// count all the subtrees in the LeftSibling\r\n\t\t\t\t\twhile(subtreeAux && subtreeAux.id != leftAncestor.id) {\r\n\t\t\t\t\t\tsubtreeAux = subtreeAux.leftSibling();\r\n\t\t\t\t\t\tnumSubtrees++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(subtreeAux) {\r\n\r\n\t\t\t\t\t\tvar subtreeMoveAux = node,\r\n\t\t\t\t\t\t\tsingleGap = totalGap / numSubtrees;\r\n\r\n\t\t\t\t\t\twhile(subtreeMoveAux.id != leftAncestor.id) {\r\n\t\t\t\t\t\t\tsubtreeMoveAux.prelim\t+= totalGap;\r\n\t\t\t\t\t\t\tsubtreeMoveAux.modifier\t+= totalGap;\r\n\t\t\t\t\t\t\ttotalGap\t\t\t\t-= singleGap;\r\n\t\t\t\t\t\t\tsubtreeMoveAux = subtreeMoveAux.leftSibling();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcompareDepth++;\r\n\r\n\t\t\t\tif(firstChild.childrenCount() === 0){\r\n\t\t\t\t\tfirstChild = node.leftMost(0, compareDepth);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfirstChild = firstChild.firstChild();\r\n\t\t\t\t}\r\n\t\t\t\tif(firstChild) {\r\n\t\t\t\t\tfirstChildLeftNeighbor = firstChild.leftNeighbor();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t* During a second pre-order walk, each node is given a\r\n\t    * final x-coordinate by summing its preliminary\r\n\t    * x-coordinate and the modifiers of all the node's\r\n\t    * ancestors.  The y-coordinate depends on the height of\r\n\t    * the tree.  (The roles of x and y are reversed for\r\n\t    * RootOrientations of EAST or WEST.)\r\n\t\t*/\r\n\t\tsecondWalk: function( node, level, X, Y) {\r\n\r\n\t\t\tif(level <= this.CONFIG.maxDepth) {\r\n\t\t\t\tvar xTmp = node.prelim + X,\r\n\t\t\t\t\tyTmp = Y, align = this.CONFIG.nodeAlign,\r\n\t\t\t\t\torinet = this.CONFIG.rootOrientation,\r\n\t\t\t\t\tlevelHeight, nodesizeTmp;\r\n\r\n\t\t\t\tif (orinet == 'NORTH' || orinet == 'SOUTH') {\r\n\r\n\t\t\t\t\tlevelHeight = this.levelMaxDim[level].height;\r\n\t\t\t\t\tnodesizeTmp = node.height;\r\n\t\t\t\t\tif (node.pseudo) node.height = levelHeight; // assign a new size to pseudo nodes\r\n\t\t\t\t}\r\n\t\t\t\telse if (orinet == 'WEST' || orinet == 'EAST') {\r\n\r\n\t\t\t\t\tlevelHeight = this.levelMaxDim[level].width;\r\n\t\t\t\t\tnodesizeTmp = node.width;\r\n\t\t\t\t\tif (node.pseudo) node.width = levelHeight; // assign a new size to pseudo nodes\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.X = xTmp;\r\n\r\n\t\t\t\tif (node.pseudo) { // pseudo nodes need to be properly aligned, otherwise position is not correct in some examples\r\n\t\t\t\t\tif (orinet == 'NORTH' || orinet == 'WEST') {\r\n\t\t\t\t\t\tnode.Y = yTmp; // align \"BOTTOM\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (orinet == 'SOUTH' || orinet == 'EAST') {\r\n\t\t\t\t\t\tnode.Y = (yTmp + (levelHeight - nodesizeTmp)); // align \"TOP\"\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode.Y = ( align == 'CENTER' ) ? (yTmp + (levelHeight - nodesizeTmp) / 2) :\r\n\t\t\t\t\t\t\t( align == 'TOP' )\t? (yTmp + (levelHeight - nodesizeTmp)) :\r\n\t\t\t\t\t\t\tyTmp;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif(orinet == 'WEST' || orinet == 'EAST') {\r\n\t\t\t\t\tvar swapTmp = node.X;\r\n\t\t\t\t\tnode.X = node.Y;\r\n\t\t\t\t\tnode.Y = swapTmp;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (orinet == 'SOUTH') {\r\n\r\n\t\t\t\t\tnode.Y = -node.Y - nodesizeTmp;\r\n\t\t\t\t}\r\n\t\t\t\telse if (orinet == 'EAST') {\r\n\r\n\t\t\t\t\tnode.X = -node.X - nodesizeTmp;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(node.childrenCount() !== 0) {\r\n\r\n\t\t\t\t\tif(node.id === 0 && this.CONFIG.hideRootNode) {\r\n\t\t\t\t\t\t// ako je root node Hiden onda nemoj njegovu dijecu pomaknut po Y osi za Level separation, neka ona budu na vrhu\r\n\t\t\t\t\t\tthis.secondWalk(node.firstChild(), level + 1, X + node.modifier, Y);\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.secondWalk(node.firstChild(), level + 1, X + node.modifier, Y + levelHeight + this.CONFIG.levelSeparation);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(node.rightSibling()) {\r\n\r\n\t\t\t\t\tthis.secondWalk(node.rightSibling(), level, X, Y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// position all the nodes, center the tree in center of its container\r\n\t\t// 0,0 coordinate is in the upper left corner\r\n\t\tpositionNodes: function() {\r\n\r\n\t\t\tvar self = this,\r\n\t\t\t\ttreeSize = {\r\n\t\t\t\t\tx: self.nodeDB.getMinMaxCoord('X', null, null),\r\n\t\t\t\t\ty: self.nodeDB.getMinMaxCoord('Y', null, null)\r\n\t\t\t\t},\r\n\r\n\t\t\t\ttreeWidth = treeSize.x.max - treeSize.x.min,\r\n\t\t\t\ttreeHeight = treeSize.y.max - treeSize.y.min,\r\n\r\n\t\t\t\ttreeCenter = {\r\n\t\t\t\t\tx: treeSize.x.max - treeWidth/2,\r\n\t\t\t\t\ty: treeSize.y.max - treeHeight/2\r\n\t\t\t\t},\r\n\r\n\t\t\t\tcontainerCenter = {\r\n\t\t\t\t\tx: self.drawArea.clientWidth/2,\r\n\t\t\t\t\ty: self.drawArea.clientHeight/2\r\n\t\t\t\t},\r\n\r\n\t\t\t\tdeltaX = containerCenter.x - treeCenter.x,\r\n\t\t\t\tdeltaY = containerCenter.y - treeCenter.y,\r\n\r\n\t\t\t\t// all nodes must have positive X or Y coordinates, handle this with offsets\r\n\t\t\t\tnegOffsetX = ((treeSize.x.min + deltaX) <= 0) ? Math.abs(treeSize.x.min) : 0,\r\n\t\t\t\tnegOffsetY = ((treeSize.y.min + deltaY) <= 0) ? Math.abs(treeSize.y.min) : 0,\r\n\t\t\t\ti, len, node;\r\n\r\n\t\t\tthis.handleOverflow(treeWidth, treeHeight);\r\n\r\n\t\t\t// position all the nodes\r\n\t\t\tfor(i =0, len = this.nodeDB.db.length; i < len; i++) {\r\n\r\n\t\t\t\tnode = this.nodeDB.get(i);\r\n\r\n\t\t\t\tif(node.id === 0 && this.CONFIG.hideRootNode) continue;\r\n\r\n\t\t\t\t// if the tree is smaller than the draw area, then center the tree within drawing area\r\n\t\t\t\tnode.X += negOffsetX + ((treeWidth < this.drawArea.clientWidth) ? deltaX : this.CONFIG.padding);\r\n\t\t\t\tnode.Y += negOffsetY + ((treeHeight < this.drawArea.clientHeight) ? deltaY : this.CONFIG.padding);\r\n\r\n\t\t\t\tvar collapsedParent = node.collapsedParent(),\r\n\t\t\t\t\thidePoint = null;\r\n\r\n\t\t\t\tif(collapsedParent) {\r\n\t\t\t\t\t// position the node behind the connector point of the parent, so future animations can be visible\r\n\t\t\t\t\thidePoint = collapsedParent.connectorPoint( true );\r\n\t\t\t\t\tnode.hide(hidePoint);\r\n\r\n\t\t\t\t} else if(node.positioned) {\r\n\t\t\t\t\t// node is allready positioned,\r\n\t\t\t\t\tnode.show();\r\n\t\t\t\t} else { // inicijalno stvaranje nodeova, postavi lokaciju\r\n\t\t\t\t\tnode.nodeDOM.style.left = node.X + 'px';\r\n\t\t\t\t\tnode.nodeDOM.style.top = node.Y + 'px';\r\n\r\n\t\t\t\t\tnode.positioned = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (node.id !== 0 && !(node.parent().id === 0 && this.CONFIG.hideRootNode)) {\r\n\t\t\t\t\tthis.setConnectionToParent(node, hidePoint); // skip the root node\r\n\t\t\t\t}\r\n\t\t\t\telse if (!this.CONFIG.hideRootNode && node.drawLineThrough) {\r\n\t\t\t\t\t// drawlinethrough is performed for for the root node also\r\n\t\t\t\t\tnode.drawLineThroughMe();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// create Raphael instance, set scrollbars if necessary\r\n\t\thandleOverflow: function(treeWidth, treeHeight) {\r\n\r\n\t\t\tvar viewWidth = (treeWidth < this.drawArea.clientWidth) ? this.drawArea.clientWidth : treeWidth + this.CONFIG.padding*2,\r\n\t\t\t\tviewHeight = (treeHeight < this.drawArea.clientHeight) ? this.drawArea.clientHeight : treeHeight + this.CONFIG.padding*2;\r\n\r\n\t\t\tif(this._R) {\r\n\t\t\t\tthis._R.setSize(viewWidth, viewHeight);\r\n\t\t\t} else {\r\n\t\t\t\tthis._R = Raphael(this.drawArea, viewWidth, viewHeight);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif(this.CONFIG.scrollbar == 'native') {\r\n\r\n\t\t\t\tif(this.drawArea.clientWidth < treeWidth) { // is owerflow-x necessary\r\n\t\t\t\t\tthis.drawArea.style.overflowX = \"auto\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(this.drawArea.clientHeight < treeHeight) { // is owerflow-y necessary\r\n\t\t\t\t\tthis.drawArea.style.overflowY = \"auto\";\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if (this.CONFIG.scrollbar == 'fancy') {\r\n\r\n\t\t\t\tvar jq_drawArea = $(this.drawArea);\r\n\t\t\t\tif (jq_drawArea.hasClass('ps-container')) { // znaci da je 'fancy' vec inicijaliziran, treba updateat\r\n\r\n\t\t\t\t\tjq_drawArea.find('.Treant').css({\r\n\t\t\t\t\t\twidth: viewWidth,\r\n\t\t\t\t\t\theight: viewHeight\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tjq_drawArea.perfectScrollbar('update');\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar mainContiner = jq_drawArea.wrapInner('<div class=\"Treant\"/>'),\r\n\t\t\t\t\t\tchild = mainContiner.find('.Treant');\r\n\r\n\t\t\t\t\tchild.css({\r\n\t\t\t\t\t\twidth: viewWidth,\r\n\t\t\t\t\t\theight: viewHeight\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tmainContiner.perfectScrollbar();\r\n\t\t\t\t}\r\n\t\t\t} // else this.CONFIG.scrollbar == 'None'\r\n\r\n\t\t},\r\n\r\n\t\tsetConnectionToParent: function(node, hidePoint) {\r\n\r\n\t\t\tvar stacked = node.stackParentId,\r\n\t\t\t\tconnLine,\r\n\t\t\t\tparent = stacked ? this.nodeDB.get(stacked) : node.parent(),\r\n\r\n\t\t\t\tpathString = hidePoint ? this.getPointPathString(hidePoint):\r\n\t\t\t\t\t\t\tthis.getPathString(parent, node, stacked);\r\n\r\n\r\n\t\t\tif (this.connectionStore[node.id]) {\r\n\t\t\t\t// connector allready exists, update the connector geometry\r\n\t\t\t\tconnLine = this.connectionStore[node.id];\r\n\t\t\t\tthis.animatePath(connLine, pathString);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconnLine = this._R.path( pathString );\r\n\t\t\t\tthis.connectionStore[node.id] = connLine;\r\n\r\n\t\t\t\t// don't show connector arrows por pseudo nodes\r\n\t\t\t\tif(node.pseudo) { delete parent.connStyle.style['arrow-end']; }\r\n\t\t\t\tif(parent.pseudo) { delete parent.connStyle.style['arrow-start']; }\r\n\r\n\t\t\t\tconnLine.attr(parent.connStyle.style);\r\n\r\n\t\t\t\tif(node.drawLineThrough || node.pseudo) { node.drawLineThroughMe(hidePoint); }\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// create the path which is represanted as a point, used for hiding the connection\r\n\t\tgetPointPathString: function(hp) {\r\n\t\t\t// \"_\" indicates the path will be hidden\r\n\t\t\treturn [\"_M\", hp.x, \",\", hp.y, 'L', hp.x, \",\", hp.y, hp.x, \",\", hp.y].join(\" \");\r\n\t\t},\r\n\r\n\t\tanimatePath: function(path, pathString) {\r\n\r\n\r\n\t\t\tif (path.hidden && pathString.charAt(0) !== \"_\") { // path will be shown, so show it\r\n\t\t\t\tpath.show();\r\n\t\t\t\tpath.hidden = false;\r\n\t\t\t}\r\n\r\n\t\t\tpath.animate({\r\n\t\t\t\tpath: pathString.charAt(0) === \"_\" ? pathString.substring(1) : pathString // remove the \"_\" prefix if it exists\r\n\t\t\t}, this.CONFIG.animation.connectorsSpeed,  this.CONFIG.animation.connectorsAnimation,\r\n\t\t\tfunction(){\r\n\t\t\t\tif(pathString.charAt(0) === \"_\") { // animation is hiding the path, hide it at the and of animation\r\n\t\t\t\t\tpath.hide();\r\n\t\t\t\t\tpath.hidden = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t},\r\n\r\n\t\tgetPathString: function(from_node, to_node, stacked) {\r\n\r\n\t\t\tvar startPoint = from_node.connectorPoint( true ),\r\n\t\t\t\tendPoint = to_node.connectorPoint( false ),\r\n\t\t\t\torinet = this.CONFIG.rootOrientation,\r\n\t\t\t\tconnType = from_node.connStyle.type,\r\n\t\t\t\tP1 = {}, P2 = {};\r\n\r\n\t\t\tif (orinet == 'NORTH' || orinet == 'SOUTH') {\r\n\t\t\t\tP1.y = P2.y = (startPoint.y + endPoint.y) / 2;\r\n\r\n\t\t\t\tP1.x = startPoint.x;\r\n\t\t\t\tP2.x = endPoint.x;\r\n\r\n\t\t\t} else if (orinet == 'EAST' || orinet == 'WEST') {\r\n\t\t\t\tP1.x = P2.x = (startPoint.x + endPoint.x) / 2;\r\n\r\n\t\t\t\tP1.y = startPoint.y;\r\n\t\t\t\tP2.y = endPoint.y;\r\n\t\t\t}\r\n\r\n\t\t\t// sp, p1, pm, p2, ep == \"x,y\"\r\n\t\t\tvar sp = startPoint.x+','+startPoint.y, p1 = P1.x+','+P1.y, p2 = P2.x+','+P2.y, ep = endPoint.x+','+endPoint.y,\r\n\t\t\t\tpm = (P1.x + P2.x)/2 +','+ (P1.y + P2.y)/2, pathString, stackPoint;\r\n\r\n\t\t\tif(stacked) { // STACKED CHILDREN\r\n\r\n\t\t\t\tstackPoint = (orinet == 'EAST' || orinet == 'WEST') ?\r\n\t\t\t\t\t\t\t\tendPoint.x+','+startPoint.y :\r\n\t\t\t\t\t\t\t\tstartPoint.x+','+endPoint.y;\r\n\r\n\t\t\t\tif( connType == \"step\" || connType == \"straight\" ) {\r\n\r\n\t\t\t\t\tpathString = [\"M\", sp, 'L', stackPoint, 'L', ep];\r\n\r\n\t\t\t\t} else if ( connType == \"curve\" || connType == \"bCurve\" ) {\r\n\r\n\t\t\t\t\tvar helpPoint, // used for nicer curve lines\r\n\t\t\t\t\t\tindent = from_node.connStyle.stackIndent;\r\n\r\n\t\t\t\t\tif (orinet == 'NORTH') {\r\n\t\t\t\t\t\thelpPoint = (endPoint.x - indent)+','+(endPoint.y - indent);\r\n\t\t\t\t\t} else if (orinet == 'SOUTH') {\r\n\t\t\t\t\t\thelpPoint = (endPoint.x - indent)+','+(endPoint.y + indent);\r\n\t\t\t\t\t} else if (orinet == 'EAST') {\r\n\t\t\t\t\t\thelpPoint = (endPoint.x + indent) +','+startPoint.y;\r\n\t\t\t\t\t} else if ( orinet == 'WEST') {\r\n\t\t\t\t\t\thelpPoint = (endPoint.x - indent) +','+startPoint.y;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpathString = [\"M\", sp, 'L', helpPoint, 'S', stackPoint, ep];\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {  // NORAML CHILDREN\r\n\r\n\t\t\t\tif( connType == \"step\" ) {\r\n\t\t\t\t\tpathString = [\"M\", sp, 'L', p1, 'L', p2, 'L', ep];\r\n\t\t\t\t} else if ( connType == \"curve\" ) {\r\n\t\t\t\t\tpathString = [\"M\", sp, 'C', p1, p2, ep ];\r\n\t\t\t\t} else if ( connType == \"bCurve\" ) {\r\n\t\t\t\t\tpathString = [\"M\", sp, 'Q', p1, pm, 'T', ep];\r\n\t\t\t\t} else if (connType == \"straight\" ) {\r\n\t\t\t\t\tpathString = [\"M\", sp, 'L', sp, ep];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn pathString.join(\" \");\r\n\t\t},\r\n\r\n\t\t// algorithm works from left to right, so previous processed node will be left neigbor of the next node\r\n\t\tsetNeighbors: function(node, level) {\r\n\r\n\t\t\tnode.leftNeighborId = this.lastNodeOnLevel[level];\r\n\t\t\tif(node.leftNeighborId) node.leftNeighbor().rightNeighborId = node.id;\r\n\t\t\tthis.lastNodeOnLevel[level] = node.id;\r\n\t\t},\r\n\r\n\t\t// used for calculation of height and width of a level (level dimensions)\r\n\t\tcalcLevelDim: function(node, level) { // root node is on level 0\r\n\t\t\tif (this.levelMaxDim[level]) {\r\n\t\t\t\tif( this.levelMaxDim[level].width < node.width )\r\n\t\t\t\t\tthis.levelMaxDim[level].width = node.width;\r\n\r\n\t\t\t\tif( this.levelMaxDim[level].height < node.height )\r\n\t\t\t\t\tthis.levelMaxDim[level].height = node.height;\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis.levelMaxDim[level] = { width: node.width, height: node.height };\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tresetLevelData: function() {\r\n\t\t\tthis.lastNodeOnLevel = [];\r\n\t\t\tthis.levelMaxDim = [];\r\n\t\t},\r\n\r\n\t\troot: function() {\r\n\t\t\treturn this.nodeDB.get( 0 );\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* NodeDB constructor.\r\n\t* NodeDB is used for storing the nodes. Each tree has its own NodeDB.\r\n\t*/\r\n\tvar NodeDB = function (nodeStructure, tree) {\r\n\r\n\t\tthis.db\t= [];\r\n\r\n\t\tvar self = this;\r\n\r\n\t\tfunction itterateChildren(node, parentId) {\r\n\r\n\t\t\tvar newNode = self.createNode(node, parentId, tree, null);\r\n\r\n\t\t\tif(node.children) {\r\n\r\n\t\t\t\tnewNode.children = [];\r\n\r\n\t\t\t\t// pseudo node is used for descending children to the next level\r\n\t\t\t\tif(node.childrenDropLevel && node.childrenDropLevel > 0) {\r\n\t\t\t\t\twhile(node.childrenDropLevel--) {\r\n\t\t\t\t\t\t// pseudo node needs to inherit the connection style from its parent for continuous connectors\r\n\t\t\t\t\t\tvar connStyle = UTIL.cloneObj(newNode.connStyle);\r\n\t\t\t\t\t\tnewNode = self.createNode('pseudo', newNode.id, tree, null);\r\n\t\t\t\t\t\tnewNode.connStyle = connStyle;\r\n\t\t\t\t\t\tnewNode.children = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar stack = (node.stackChildren && !self.hasGrandChildren(node)) ? newNode.id : null;\r\n\r\n\t\t\t\t// svildren are position on separate leves, one beneeth the other\r\n\t\t\t\tif (stack !== null) { newNode.stackChildren = []; }\r\n\r\n\t\t\t\tfor (var i = 0, len = node.children.length; i < len ; i++) {\r\n\r\n\t\t\t\t\tif (stack !== null) {\r\n\t\t\t\t\t\tnewNode =  self.createNode(node.children[i], newNode.id, tree, stack);\r\n\t\t\t\t\t\tif((i + 1) < len) newNode.children = []; // last node cant have children\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\titterateChildren(node.children[i], newNode.id);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (tree.CONFIG.animateOnInit) nodeStructure.collapsed = true;\r\n\r\n\t\titterateChildren( nodeStructure, -1); // root node\r\n\r\n\t\tthis.createGeometries(tree);\r\n\t};\r\n\r\n\tNodeDB.prototype = {\r\n\r\n\t\tcreateGeometries: function(tree) {\r\n\t\t\tvar i = this.db.length, node;\r\n\t\t\twhile(i--) {\r\n\t\t\t\tthis.get(i).createGeometry(tree);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tget: function (nodeId) {\r\n\t\t\treturn this.db[nodeId]; // get node by ID\r\n\t\t},\r\n\r\n\t\tcreateNode: function(nodeStructure, parentId, tree, stackParentId) {\r\n\r\n\t\t\tvar node = new TreeNode( nodeStructure, this.db.length, parentId, tree, stackParentId );\r\n\r\n\t\t\tthis.db.push( node );\r\n\t\t\tif( parentId >= 0 ) this.get( parentId ).children.push( node.id ); //skip root node\r\n\r\n\t\t\tif( stackParentId ) {\r\n\t\t\t\tthis.get( stackParentId ).stackParent = true;\r\n\t\t\t\tthis.get( stackParentId ).stackChildren.push( node.id );\r\n\t\t\t}\r\n\r\n\t\t\treturn node;\r\n\t\t},\r\n\r\n\t\tgetMinMaxCoord: function( dim, parent, MinMax ) { // used for getting the dimensions of the tree, dim = 'X' || 'Y'\r\n\t\t\t// looks for min and max (X and Y) within the set of nodes\r\n\t\t\tvar parent = parent || this.get(0),\r\n\t\t\t \ti = parent.childrenCount(),\r\n\t\t\t\tMinMax = MinMax || { // start with root node dimensions\r\n\t\t\t\t\tmin: parent[dim],\r\n\t\t\t\t\tmax: parent[dim] + ((dim == 'X') ? parent.width : parent.height)\r\n\t\t\t\t};\r\n\r\n\t\t\twhile(i--) {\r\n\r\n\t\t\t\tvar node = parent.childAt(i),\r\n\t\t\t\t\tmaxTest = node[dim] + ((dim == 'X') ? node.width : node.height),\r\n\t\t\t\t\tminTest = node[dim];\r\n\r\n\t\t\t\tif (maxTest > MinMax.max) {\r\n\t\t\t\t\tMinMax.max = maxTest;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif (minTest < MinMax.min) {\r\n\t\t\t\t\tMinMax.min = minTest;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.getMinMaxCoord(dim, node, MinMax);\r\n\t\t\t}\r\n\t\t\treturn MinMax;\r\n\t\t},\r\n\r\n\t\thasGrandChildren: function(nodeStructure) {\r\n\t\t\tvar i = nodeStructure.children.length;\r\n\t\t\twhile(i--) {\r\n\t\t\t\tif(nodeStructure.children[i].children) return true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\r\n\t/**\r\n\t* TreeNode constructor.\r\n\t* @constructor\r\n\t*/\r\n\tvar TreeNode = function (nodeStructure, id, parentId, tree, stackParentId) {\r\n\r\n\t\tthis.id\t\t\t= id;\r\n\t\tthis.parentId\t= parentId;\r\n\t\tthis.treeId\t\t= tree.id;\r\n\t\tthis.prelim\t\t= 0;\r\n\t\tthis.modifier\t= 0;\r\n\r\n\t\tthis.stackParentId = stackParentId;\r\n\r\n\t\t// pseudo node is a node with width=height=0, it is invisible, but necessary for the correct positiong of the tree\r\n\t\tthis.pseudo = nodeStructure === 'pseudo' || nodeStructure['pseudo'];\r\n\r\n\t\tthis.image = nodeStructure.image;\r\n\r\n\t\tthis.link = UTIL.createMerge( tree.CONFIG.node.link,  nodeStructure.link);\r\n\r\n\t\tthis.connStyle = UTIL.createMerge(tree.CONFIG.connectors, nodeStructure.connectors);\r\n\r\n\t\tthis.drawLineThrough = nodeStructure.drawLineThrough === false ? false : nodeStructure.drawLineThrough || tree.CONFIG.node.drawLineThrough;\r\n\r\n\t\tthis.collapsable = nodeStructure.collapsable === false ? false : nodeStructure.collapsable || tree.CONFIG.node.collapsable;\r\n\t\tthis.collapsed = nodeStructure.collapsed;\r\n\r\n\t\tthis.text = nodeStructure.text;\r\n\r\n\t\t// '.node' DIV\r\n\t\tthis.nodeInnerHTML\t= nodeStructure.innerHTML;\r\n\t\tthis.nodeHTMLclass\t= (tree.CONFIG.node.HTMLclass ? tree.CONFIG.node.HTMLclass : '') + // globaly defined class for the nodex\r\n\t\t\t\t\t\t\t\t(nodeStructure.HTMLclass ? (' ' + nodeStructure.HTMLclass) : '');\t\t// + specific node class\r\n\r\n\t\tthis.nodeHTMLid\t\t= nodeStructure.HTMLid;\r\n\t};\r\n\r\n\tTreeNode.prototype = {\r\n\r\n\t\tTree: function() {\r\n\t\t\treturn TreeStore.get(this.treeId);\r\n\t\t},\r\n\r\n\t\tdbGet: function(nodeId) {\r\n\t\t\treturn this.Tree().nodeDB.get(nodeId);\r\n\t\t},\r\n\r\n\t\tsize: function() { // returns the width of the node\r\n\t\t\tvar orient = this.Tree().CONFIG.rootOrientation;\r\n\r\n\t\t\tif(this.pseudo) return - this.Tree().CONFIG.subTeeSeparation; // prevents of separateing the subtrees\r\n\r\n\t\t\tif (orient == 'NORTH' || orient == 'SOUTH')\r\n\t\t\t\treturn this.width;\r\n\r\n\t\t\telse if (orient == 'WEST' || orient == 'EAST')\r\n\t\t\t\treturn this.height;\r\n\t\t},\r\n\r\n\t\tchildrenCount: function () {\r\n\t\t\treturn\t(this.collapsed || !this.children) ? 0 : this.children.length;\r\n\t\t},\r\n\r\n\t\tchildAt: function(i) {\r\n\t\t\treturn this.dbGet( this.children[i] );\r\n\t\t},\r\n\r\n\t\tfirstChild: function() {\r\n\t\t\treturn this.childAt(0);\r\n\t\t},\r\n\r\n\t\tlastChild: function() {\r\n\t\t\treturn this.childAt( this.children.length - 1 );\r\n\t\t},\r\n\r\n\t\tparent: function() {\r\n\t\t\treturn this.dbGet( this.parentId );\r\n\t\t},\r\n\r\n\t\tleftNeighbor: function() {\r\n\t\t\tif( this.leftNeighborId ) return this.dbGet( this.leftNeighborId );\r\n\t\t},\r\n\r\n\t\trightNeighbor: function() {\r\n\t\t\tif( this.rightNeighborId ) return this.dbGet( this.rightNeighborId );\r\n\t\t},\r\n\r\n\t\tleftSibling: function () {\r\n\t\t\tvar leftNeighbor = this.leftNeighbor();\r\n\r\n\t\t\tif( leftNeighbor && leftNeighbor.parentId == this.parentId ) return leftNeighbor;\r\n\t\t},\r\n\r\n\t\trightSibling: function () {\r\n\t\t\tvar rightNeighbor = this.rightNeighbor();\r\n\r\n\t\t\tif( rightNeighbor && rightNeighbor.parentId == this.parentId ) return rightNeighbor;\r\n\t\t},\r\n\r\n\t\tchildrenCenter: function ( tree ) {\r\n\t\t\tvar first = this.firstChild(),\r\n\t\t\t\tlast = this.lastChild();\r\n\t\t\treturn first.prelim + ((last.prelim - first.prelim) + last.size()) / 2;\r\n\t\t},\r\n\r\n\t\t// find out if one of the node ancestors is collapsed\r\n\t\tcollapsedParent: function() {\r\n\t\t\tvar parent = this.parent();\r\n\t\t\tif (!parent) return false;\r\n\t\t\tif (parent.collapsed) return parent;\r\n\t\t\treturn parent.collapsedParent();\r\n\t\t},\r\n\r\n\t\tleftMost: function ( level, depth ) { // returns the leftmost child at specific level, (initaial level = 0)\r\n\r\n\t\t\tif( level >= depth ) return this;\r\n\t\t\tif( this.childrenCount() === 0 ) return;\r\n\r\n\t\t\tfor(var i = 0, n = this.childrenCount(); i < n; i++) {\r\n\r\n\t\t\t\tvar leftmostDescendant = this.childAt(i).leftMost( level + 1, depth );\r\n\t\t\t\tif(leftmostDescendant)\r\n\t\t\t\t\treturn leftmostDescendant;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// returns start or the end point of the connector line, origin is upper-left\r\n\t\tconnectorPoint: function(startPoint) {\r\n\t\t\tvar orient = this.Tree().CONFIG.rootOrientation, point = {};\r\n\r\n\t\t\tif(this.stackParentId) { // return different end point if node is a stacked child\r\n\t\t\t\tif (orient == 'NORTH' || orient == 'SOUTH') { orient = 'WEST'; }\r\n\t\t\t\telse if (orient == 'EAST' || orient == 'WEST') { orient = 'NORTH'; }\r\n\t\t\t}\r\n\t\t\t// if pseudo, a virtual center is used\r\n\t\t\tif (orient == 'NORTH') {\r\n\r\n\t\t\t\tpoint.x = (this.pseudo) ? this.X - this.Tree().CONFIG.subTeeSeparation/2 : this.X + this.width/2;\r\n\t\t\t\tpoint.y = (startPoint) ? this.Y + this.height : this.Y;\r\n\r\n\t\t\t} else if (orient == 'SOUTH') {\r\n\r\n\t\t\t\tpoint.x = (this.pseudo) ? this.X - this.Tree().CONFIG.subTeeSeparation/2 : this.X + this.width/2;\r\n\t\t\t\tpoint.y = (startPoint) ? this.Y : this.Y + this.height;\r\n\r\n\t\t\t} else if (orient == 'EAST') {\r\n\r\n\t\t\t\tpoint.x = (startPoint) ? this.X : this.X + this.width;\r\n\t\t\t\tpoint.y = (this.pseudo) ? this.Y - this.Tree().CONFIG.subTeeSeparation/2 : this.Y + this.height/2;\r\n\r\n\t\t\t} else if (orient == 'WEST') {\r\n\r\n\t\t\t\tpoint.x = (startPoint) ? this.X + this.width : this.X;\r\n\t\t\t\tpoint.y =  (this.pseudo) ? this.Y - this.Tree().CONFIG.subTeeSeparation/2 : this.Y + this.height/2;\r\n\t\t\t}\r\n\t\t\treturn point;\r\n\t\t},\r\n\r\n\t\tpathStringThrough: function() { // get the geometry of a path going through the node\r\n\t\t\tvar startPoint = this.connectorPoint(true),\r\n\t\t\t\tendPoint = this.connectorPoint(false);\r\n\r\n\t\t\treturn [\"M\", startPoint.x+\",\"+startPoint.y, 'L', endPoint.x+\",\"+endPoint.y].join(\" \");\r\n\t\t},\r\n\r\n\t\tdrawLineThroughMe: function(hidePoint) { // hidepoint se proslijedjuje ako je node sakriven zbog collapsed\r\n\r\n\t\t\tvar pathString = hidePoint ? this.Tree().getPointPathString(hidePoint) : this.pathStringThrough();\r\n\r\n\t\t\tthis.lineThroughMe = this.lineThroughMe || this.Tree()._R.path(pathString);\r\n\r\n\t\t\tvar line_style = UTIL.cloneObj(this.connStyle.style);\r\n\r\n\t\t\tdelete line_style['arrow-start'];\r\n\t\t\tdelete line_style['arrow-end'];\r\n\r\n\t\t\tthis.lineThroughMe.attr( line_style );\r\n\r\n\t\t\tif(hidePoint) {\r\n\t\t\t\tthis.lineThroughMe.hide();\r\n\t\t\t\tthis.lineThroughMe.hidden = true;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\taddSwitchEvent: function(my_switch) {\r\n\t\t\tvar self = this;\r\n\t\t\tUTIL.addEvent(my_switch, 'click', function(e){\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tself.toggleCollapse();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\ttoggleCollapse: function() {\r\n\t\t\tvar tree = this.Tree();\r\n\r\n\t\t\tif (! tree.inAnimation) {\r\n\r\n\t\t\t\ttree.inAnimation = true;\r\n\r\n\t\t\t\tthis.collapsed = !this.collapsed; // toglle the collapse at each click\r\n\t\t\t\tif (this.collapsed) {\r\n\t\t\t\t\t$(this.nodeDOM).addClass('collapsed');\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$(this.nodeDOM).removeClass('collapsed');\r\n\t\t\t\t}\r\n\t\t\t\ttree.positionTree();\r\n\r\n\t\t\t\tsetTimeout(function() { // set the flag after the animation\r\n\t\t\t\t\ttree.inAnimation = false;\r\n\t\t\t\t}, tree.CONFIG.animation.nodeSpeed > tree.CONFIG.animation.connectorsSpeed ? tree.CONFIG.animation.nodeSpeed : tree.CONFIG.animation.connectorsSpeed)\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\thide: function(collapse_to_point) {\r\n\t\t\tthis.nodeDOM.style.overflow = \"hidden\";\r\n\r\n\t\t\tvar jq_node = $(this.nodeDOM), tree = this.Tree(),\r\n\t\t\t\tconfig = tree.CONFIG,\r\n\t\t\t\tnew_pos = {\r\n\t\t\t\t\tleft: collapse_to_point.x,\r\n\t\t\t\t\ttop: collapse_to_point.y\r\n\t\t\t\t};\r\n\r\n\t\t\tif (!this.hidden) { new_pos.width = new_pos.height = 0; }\r\n\r\n\t\t\tif(!this.startW || !this.startH) { this.startW = jq_node.outerWidth(); this.startH = jq_node.outerHeight(); }\r\n\r\n\t\t\t// if parent was hidden in initial configuration, position the node behind the parent without animations\r\n\t\t\tif(!this.positioned || this.hidden) {\r\n\t\t\t\tthis.nodeDOM.style.visibility = 'hidden';\r\n\t\t\t\tjq_node.css(new_pos);\r\n\t\t\t\tthis.positioned = true;\r\n\t\t\t} else {\r\n\t\t\t\tjq_node.animate(new_pos, config.animation.nodeSpeed, config.animation.nodeAnimation,\r\n\t\t\t\tfunction(){\r\n\t\t\t\t\tthis.style.visibility = 'hidden';\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// animate the line through node if the line exists\r\n\t\t\tif(this.lineThroughMe) {\r\n\t\t\t\tvar new_path = tree.getPointPathString(collapse_to_point);\r\n\t\t\t\tif (this.hidden) {\r\n\t\t\t\t\t// update without animations\r\n\t\t\t\t\tthis.lineThroughMe.attr({path: new_path});\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// update with animations\r\n\t\t\t\t\ttree.animatePath(this.lineThroughMe, tree.getPointPathString(collapse_to_point));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.hidden = true;\r\n\t\t},\r\n\r\n\t\tshow: function() {\r\n\t\t\tthis.nodeDOM.style.visibility = 'visible';\r\n\r\n\t\t\tvar new_pos = {\r\n\t\t\t\tleft: this.X,\r\n\t\t\t\ttop: this.Y\r\n\t\t\t},\r\n\t\t\ttree = this.Tree(),  config = tree.CONFIG;\r\n\r\n\t\t\t// if the node was hidden, update width and height\r\n\t\t\tif(this.hidden) {\r\n\t\t\t\tnew_pos.width = this.startW;\r\n\t\t\t\tnew_pos.height = this.startH;\r\n\t\t\t}\r\n\r\n\t\t\t$(this.nodeDOM).animate(\r\n\t\t\t\tnew_pos,\r\n\t\t\t\tconfig.animation.nodeSpeed, config.animation.nodeAnimation,\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\t// $.animate applys \"overflow:hidden\" to the node, remove it to avoid visual problems\r\n\t\t\t\t\tthis.style.overflow = \"\";\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tif(this.lineThroughMe) {\r\n\t\t\t\ttree.animatePath(this.lineThroughMe, this.pathStringThrough());\r\n\t\t\t}\r\n\r\n\t\t\tthis.hidden = false;\r\n\t\t}\r\n\t};\r\n\r\n\tTreeNode.prototype.createGeometry = function(tree) {\r\n\r\n\t\tif (this.id === 0 && tree.CONFIG.hideRootNode) {\r\n\t\t\tthis.width = 0; this.height = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar drawArea = tree.drawArea,\r\n\t\t\timage, i,\r\n\r\n\t\t/////////// CREATE NODE //////////////\r\n\t\tnode = this.link.href ? document.createElement('a') : document.createElement('div');\r\n\r\n\t\tnode.className = (!this.pseudo) ? TreeNode.CONFIG.nodeHTMLclass : 'pseudo';\r\n\t\tif(this.nodeHTMLclass && !this.pseudo) node.className += ' ' + this.nodeHTMLclass;\r\n\r\n\t\tif(this.nodeHTMLid) node.id = this.nodeHTMLid;\r\n\r\n\t\tif(this.link.href) {\r\n\t\t\tnode.href = this.link.href;\r\n\t\t\tnode.target = this.link.target;\r\n\t\t}\r\n\r\n\t\t/////////// CREATE innerHTML //////////////\r\n\t\tif (!this.pseudo) {\r\n\t\t\tif (!this.nodeInnerHTML) {\r\n\r\n\t\t\t\t// IMAGE\r\n\t\t\t\tif(this.image) {\r\n\t\t\t\t\timage = document.createElement('img');\r\n\r\n\t\t\t\t\timage.src = this.image;\r\n\t\t\t\t\tnode.appendChild(image);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TEXT\r\n\t\t\t\tif(this.text) {\r\n\t\t\t\t\tfor(var key in this.text) {\r\n\t\t\t\t\t\tif(TreeNode.CONFIG.textClass[key]) {\r\n\t\t\t\t\t\t\tvar text = document.createElement(this.text[key].href ? 'a' : 'p');\r\n\r\n\t\t\t\t\t\t\t// meke an <a> element if required\r\n\t\t\t\t\t\t\tif (this.text[key].href) {\r\n\t\t\t\t\t\t\t\ttext.href = this.text[key].href;\r\n\t\t\t\t\t\t\t\tif (this.text[key].target) { text.target = this.text[key].target; }\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\ttext.className = TreeNode.CONFIG.textClass[key];\r\n\t\t\t\t\t\t\ttext.appendChild(document.createTextNode(\r\n\t\t\t\t\t\t\t\tthis.text[key].val ? this.text[key].val :\r\n\t\t\t\t\t\t\t\t\tthis.text[key] instanceof Object ? \"'val' param missing!\" : this.text[key]\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tnode.appendChild(text);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// get some element by ID and clone its structure into a node\r\n\t\t\t\tif (this.nodeInnerHTML.charAt(0) === \"#\") {\r\n\t\t\t\t\tvar elem = document.getElementById(this.nodeInnerHTML.substring(1));\r\n\t\t\t\t\tif (elem) {\r\n\t\t\t\t\t\tnode = elem.cloneNode(true);\r\n\t\t\t\t\t\tnode.id += \"-clone\";\r\n\t\t\t\t\t\tnode.className += \" node\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnode.innerHTML = \"<b> Wrong ID selector </b>\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// insert your custom HTML into a node\r\n\t\t\t\t\tnode.innerHTML = this.nodeInnerHTML;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// handle collapse switch\r\n\t\t\tif (this.collapsed || (this.collapsable && this.childrenCount() && !this.stackParentId)) {\r\n\t\t\t\tvar my_switch = document.createElement('a');\r\n\t\t\t\tmy_switch.className = \"collapse-switch\";\r\n\t\t\t\tnode.appendChild(my_switch);\r\n\t\t\t\tthis.addSwitchEvent(my_switch);\r\n\t\t\t\tif (this.collapsed) { node.className += \" collapsed\"; }\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/////////// APPEND all //////////////\r\n\t\tdrawArea.appendChild(node);\r\n\r\n\t\tthis.width = node.offsetWidth;\r\n\t\tthis.height = node.offsetHeight;\r\n\r\n\t\tthis.nodeDOM = node;\r\n\r\n\t\ttree.imageLoader.processNode(this);\r\n\t};\r\n\r\n\r\n\r\n\t// ###########################################\r\n\t//\t\tExpose global + default CONFIG params\r\n\t// ###########################################\r\n\r\n\r\n\tTree.CONFIG = {\r\n\t\tmaxDepth: 100,\r\n\t\trootOrientation: 'NORTH', // NORTH || EAST || WEST || SOUTH\r\n\t\tnodeAlign: 'CENTER', // CENTER || TOP || BOTTOM\r\n\t\tlevelSeparation: 30,\r\n\t\tsiblingSeparation: 30,\r\n\t\tsubTeeSeparation: 30,\r\n\r\n\t\thideRootNode: false,\r\n\r\n\t\tanimateOnInit: false,\r\n\t\tanimateOnInitDelay: 500,\r\n\r\n\t\tpadding: 15, // the difference is seen only when the scrollbar is shown\r\n\t\tscrollbar: 'native', // \"native\" || \"fancy\" || \"None\" (PS: \"fancy\" requires jquery and perfect-scrollbar)\r\n\r\n\t\tconnectors: {\r\n\r\n\t\t\ttype: 'curve', // 'curve' || 'step' || 'straight' || 'bCurve'\r\n\t\t\tstyle: {\r\n\t\t\t\tstroke: 'black'\r\n\t\t\t},\r\n\t\t\tstackIndent: 15\r\n\t\t},\r\n\r\n\t\tnode: { // each node inherits this, it can all be overrifen in node config\r\n\r\n\t\t\t// HTMLclass: 'node',\r\n\t\t\t// drawLineThrough: false,\r\n\t\t\t// collapsable: false,\r\n\t\t\tlink: {\r\n\t\t\t\ttarget: '_self'\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tanimation: { // each node inherits this, it can all be overrifen in node config\r\n\r\n\t\t\tnodeSpeed: 450,\r\n\t\t\tnodeAnimation: 'linear',\r\n\t\t\tconnectorsSpeed: 450,\r\n\t\t\tconnectorsAnimation: 'linear'\r\n\t\t}\r\n\t};\r\n\r\n\tTreeNode.CONFIG = {\r\n\t\tnodeHTMLclass: 'node',\r\n\r\n\t\ttextClass: {\r\n\t\t\tname:\t'node-name',\r\n\t\t\ttitle:\t'node-title',\r\n\t\t\tdesc:\t'node-desc',\r\n\t\t\tcontact: 'node-contact'\r\n\t\t}\r\n\t};\r\n\r\n\t// #############################################\r\n\t// Makes a JSON chart config out of Array config\r\n\t// #############################################\r\n\r\n\tvar JSONconfig = {\r\n\t\tmake: function( configArray ) {\r\n\r\n\t\t\tvar i = configArray.length, node;\r\n\r\n\t\t\tthis.jsonStructure = {\r\n\t\t\t\tchart: null,\r\n\t\t\t\tnodeStructure: null\r\n\t\t\t};\r\n\t\t\t//fist loop: find config, find root;\r\n\t\t\twhile(i--) {\r\n\t\t\t\tnode = configArray[i];\r\n\t\t\t\tif (node.hasOwnProperty('container')) {\r\n\t\t\t\t\tthis.jsonStructure.chart = node;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!node.hasOwnProperty('parent') && ! node.hasOwnProperty('container')) {\r\n\t\t\t\t\tthis.jsonStructure.nodeStructure = node;\r\n\t\t\t\t\tnode.myID = this.getID();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.findChildren(configArray);\r\n\r\n\t\t\treturn this.jsonStructure;\r\n\t\t},\r\n\r\n\t\tfindChildren: function(nodes) {\r\n\t\t\tvar parents = [0]; // start witha a root node\r\n\r\n\t\t\twhile(parents.length) {\r\n\t\t\t\tvar parentId = parents.pop(),\r\n\t\t\t\t\tparent = this.findNode(this.jsonStructure.nodeStructure, parentId),\r\n\t\t\t\t\ti = 0, len = nodes.length,\r\n\t\t\t\t\tchildren = [];\r\n\r\n\t\t\t\tfor(;i<len;i++) {\r\n\t\t\t\t\tvar node = nodes[i];\r\n\t\t\t\t\tif(node.parent && (node.parent.myID == parentId)) { // skip config and root nodes\r\n\r\n\t\t\t\t\t\tnode.myID = this.getID();\r\n\r\n\t\t\t\t\t\tdelete node.parent;\r\n\r\n\t\t\t\t\t\tchildren.push(node);\r\n\t\t\t\t\t\tparents.push(node.myID);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (children.length) {\r\n\t\t\t\t\tparent.children = children;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tfindNode: function(node, nodeId) {\r\n\t\t\tvar childrenLen, found;\r\n\r\n\t\t\tif (node.myID === nodeId) {\r\n\t\t\t\treturn node;\r\n\t\t\t} else if (node.children) {\r\n\t\t\t\tchildrenLen = node.children.length;\r\n\t\t\t\twhile(childrenLen--) {\r\n\t\t\t\t\tfound = this.findNode(node.children[childrenLen], nodeId);\r\n\t\t\t\t\tif(found) {\r\n\t\t\t\t\t\treturn found;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetID: (function() {\r\n\t\t\tvar i = 0;\r\n\t\t\treturn function() {\r\n\t\t\t\treturn i++;\r\n\t\t\t};\r\n\t\t})()\r\n\t};\r\n\r\n\t/**\r\n\t* Chart constructor.\r\n\t*/\r\n\tvar Treant = function(jsonConfig, callback) {\r\n\r\n\t\tif (jsonConfig instanceof Array) {\r\n\t\t\tjsonConfig = JSONconfig.make(jsonConfig);\r\n\t\t}\r\n\r\n\t\tvar newTree = TreeStore.createTree(jsonConfig);\r\n\t\tnewTree.positionTree(callback);\r\n\r\n\t\tthis.tree_id = newTree.id;\r\n\t};\r\n\r\n\tTreant.prototype.destroy = function() {\r\n\t\tTreeStore.destroy(this.tree_id);\r\n\t};\r\n\r\n\t/* expose constructor globaly */\r\n\texports.Treant = Treant;\r\n\r\n})( this.hasOwnProperty('window') ? window: module.exports );\r\n\n\n//# sourceURL=webpack:///./node_modules/treant-js/Treant.js?");

/***/ }),

/***/ "./node_modules/util/node_modules/inherits/inherits_browser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/util/node_modules/inherits/inherits_browser.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/util/node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//# sourceURL=webpack:///./node_modules/util/support/isBufferBrowser.js?");

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/util/node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/util/util.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/convert.js":
/*!************************!*\
  !*** ./src/convert.js ***!
  \************************/
/*! exports provided: convertForStatement, convertDoWhileStatement, convertAssignExpression, convertWhileStatement, convertAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertForStatement\", function() { return convertForStatement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertDoWhileStatement\", function() { return convertDoWhileStatement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertAssignExpression\", function() { return convertAssignExpression; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertWhileStatement\", function() { return convertWhileStatement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertAll\", function() { return convertAll; });\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\n\n\n\n\n/**\n *  Coverts a node to a simplified series of nodes\n *  @param   node The node to convert(JS object)\n *  @return       An array of nodes repesenting the simplified construct\n */\n\n function convertIfElseStatement(node) {\n    // console.log(\"Hello:\",node.type)\n    assert__WEBPACK_IMPORTED_MODULE_0___default.a.ok(node.type == 'IfStatement', node.type, \"invalid node type(IfStatement) expected\");\n\n     let ifGuard = {\n         type: \"LabeledStatement\",\n         body: {\n             type: \"IfGotoStatement\",\n             test: node.test,\n             label: null\n         },\n         label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n         inherited: false\n     };\n     let topGoto = {\n         type: \"GotoStatement\",\n         label: null\n     }\n     let body = {\n         type: \"LabeledStatement\",\n         label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n         body: convertAll(node.consequent),\n         inherited: false\n     }\n\n     let elseBody = {\n         type: \"LabeledStatement\",\n         label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n         body: convertAll(node.alternative),\n         inherited: false\n     }\n     ifGuard.body.label = body.label;\n     topGoto.label = elseBody.label;\n\n     let endGoto = {\n         type: \"GotoStatement\",\n         label: null\n     }\n\n     let ifelseExit = {\n         type: 'LabeledStatement',\n         label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n         body: {\n             type: \"EmptyStatement\"\n         },\n         inherited: false\n     }\n     endGoto.label = ifelseExit.label;\n\n     return {\n         type: \"SequenceExpression\",\n         statements: [ifGuard, topGoto, body, endGoto, elseBody, endGoto, ifelseExit]\n     }\n }\n\n function convertForStatement(node) {\n\n     assert__WEBPACK_IMPORTED_MODULE_0___default.a.ok(node.type == 'ForStatement', node.type, \"invalid node type(Assign expected)\");\n\n     let initial= {\n           type:\"SingleAssignmentExpression\",\n           target: node.init.left,\n           operand1: node.init.right\n\n     }\n     let ifGuard = {\n         type: \"LabeledStatement\",\n         body: {\n             type: \"IfGotoStatement\",\n             test: node.test,\n             label: null\n         },\n         label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n         inherited: false\n     };\n     let topGoto = {\n         type: \"GotoStatement\",\n         label: null\n     }\n     let body = {\n         type: \"LabeledStatement\",\n         label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n         body: convertAll(node.body),\n         inherited: false\n     }\n     ifGuard.body.label = body.label;\n     let inc={\n       type :\"UnaryExpression\",\n       operator : node.update.operator,\n       argument : node.update.argument,\n\n       prefix :  node.update.prefix\n     }\n     let endGoto = {\n         type: \"GotoStatement\",\n         label: ifGuard.label\n     }\n     let loopExit = {\n         type: 'LabeledStatement',\n         label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n         body: {\n             type: \"EmptyStatement\"\n         },\n         inherited: false\n     }\n     topGoto.label = loopExit.label;\n\n     return {\n         type: \"SequenceExpression\",\n         statements: [initial, ifGuard, topGoto, body, inc, endGoto, loopExit]\n     }\n }\n\n function convertDoWhileStatement(node) {\n\n     assert__WEBPACK_IMPORTED_MODULE_0___default.a.ok(node.type == 'DoWhileStatement', node.type, \"invalid node type(Assign expected)\");\n\n\n     let body = {\n         type: \"LabeledStatement\",\n         label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n         body: convertAll(node.body),\n         inherited: false\n     }\n     let ifGuard = {\n        type: \"IfGotoStatement\",\n        test: node.test,\n        label: null\n    };\n    ifGuard.label = body.label;\n    let loopExit = {\n        type: 'LabeledStatement',\n        label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n        body: {\n            type: \"EmptyStatement\"\n        },\n        inherited: false\n    }\n     let endGoto = {\n         type: \"GotoStatement\",\n         label: null\n     }\n     endGoto.label = loopExit.label\n     return {\n         type: \"Sequence\",\n         statements: [ body, ifGuard,  endGoto, loopExit]\n     }\n }\n\n\n\nfunction convertAssignExpression(node) {\n    assert__WEBPACK_IMPORTED_MODULE_0___default.a.ok(node.type == 'AssignmentExpression',`invalid node type(Assign expected),got ${node.type}`);\n\n    let tempBlock = {\n        type: \"SingleAssignmentExpression\",\n        target: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"genTemp\"])(),\n        operand1: node.right\n    };\n\n    let assignblock = {\n        type: \"SingleAssignmentExpression\",\n        target: node.left,\n        operand1: tempBlock.target\n    };\n    return {\n        type: \"Sequence\",\n        statements: [tempBlock, assignblock]\n    }\n\n}\n\nfunction convertWhileStatement(node) {\n\n    assert__WEBPACK_IMPORTED_MODULE_0___default.a.ok(node.type == 'WhileStatement', node.type, \"invalid node type(Assign expected)\");\n\n    let ifGuard = {\n        type: \"LabeledStatement\",\n        body: {\n            type: \"IfGotoStatement\",\n            test: node.test,\n            label: null\n        },\n        label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n        inherited: false\n    };\n    let topGoto = {\n        type: \"GotoStatement\",\n        label: null\n    }\n    let body = {\n        type: \"LabeledStatement\",\n        label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n        body: convertAll(node.body),\n        inherited: false\n    }\n    ifGuard.body.label = body.label;\n    let endGoto = {\n        type: \"GotoStatement\",\n        label: ifGuard.label\n    }\n    let loopExit = {\n        type: 'LabeledStatement',\n        label: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"GenLabel\"])(),\n        body: {\n            type: \"EmptyStatement\"\n        },\n        inherited: false\n    }\n    topGoto.label = loopExit.label;\n\n    return {\n        type: \"SequenceExpression\",\n        statements: [ifGuard, topGoto, body, endGoto, loopExit]\n    }\n}\n\nfunction convertAll(node) {\n    if (node == null || typeof node == 'undefined')\n        return;\n\n    switch (node.type) {\n        case \"WhileStatement\":\n            node = convertWhileStatement(node);\n            break;\n        case \"DoWhileStatement\":\n            node = convertDoWhileStatement(node);\n            break;\n        case \"ForStatement\":\n            node = convertForStatement(node);\n            break;\n        case \"IfStatement\":\n            node = convertIfElseStatement(node);\n            break;\n        case \"AssignmentExpression\":\n            node = convertAssignExpression(node);\n            break;\n        case \"ExpressionStatement\":\n            node = convertExpressionStatement(node);\n            break;\n        default:\n            console.log(`[Warning] ${node.type} transformation not supported`);\n    }\n    return node;\n}\n\n\n//# sourceURL=webpack:///./src/convert.js?");

/***/ }),

/***/ "./src/convertIC.js":
/*!**************************!*\
  !*** ./src/convertIC.js ***!
  \**************************/
/*! exports provided: convertNodeObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertNodeObject\", function() { return convertNodeObject; });\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\n\n\n\n\n/**\n *  Coverts a simplified node to a IC\n *  @param   node The node to convert(JS object)\n *  @return       An array of nodes repesenting the simplified construct\n */\n\nfunction convertNodeIC(node) {\n    var generatedIC = \"\";\n    // console.log(node.type);\n    switch (node.type) {\n        case 'Identifier':\n            generatedIC = node.name;\n            break;\n        case 'Literal':\n            generatedIC = node.value;\n            break;\n        case 'EmptyStatement':\n            generatedIC = '.....';\n            break;\n        case 'SingleAssignmentExpression':\n            generatedIC = convertNodeIC(node.target) + '=' + convertNodeIC(node.operand1);\n            break;\n        case 'LabeledStatement':\n            if (!node.inherited) {\n                generatedIC = node.label + \": \";\n            }\n            generatedIC += '\\n\\t';\n            generatedIC += convertNodeIC(node.body);\n            // console.log(\"DEBUG:\", generatedIC);\n            break;\n        case 'SingleAssignmentExpression':\n            generatedIC = node.target + \" = \" + node.operand1;\n            break;\n        case 'UnaryExpression':\n            generatedIC = convertNodeIC(node.argument) + node.operator;\n            break;\n        case 'Sequence':\n            var tempIC = node.statements.map(entry => convertNodeIC(entry));\n            var i;\n            for (i = 0; i < tempIC.length; i++) {\n                // console.log(\"DEBUG:\", tempIC[i]);\n                generatedIC += tempIC[i];\n                // console.log(\"DEBUG GEN:\", generatedIC);\n                generatedIC += '\\n';\n            }\n            break;;\n        case 'SequenceExpression':\n            var tempIC = node.statements.map(entry => convertNodeIC(entry));\n            var i;\n            for (i = 0; i < tempIC.length; i++) {\n                // console.log(\"DEBUG:\", tempIC[i]);\n                generatedIC += tempIC[i];\n                // console.log(\"DEBUG GEN:\", generatedIC);\n                generatedIC += '\\n';\n            }\n            break;\n        case 'ExpressionStatement':\n            generatedIC += convertNodeIC(node.expression);\n            break;\n        case 'GotoStatement':\n            generatedIC = \"goto \" + node.label;\n            break;;\n        case 'IfGotoStatement':\n            generatedIC = \"if \" + convertNodeIC(node.test) + \" goto \" + node.label;\n            break;\n        case 'BinaryExpression':\n            generatedIC = convertNodeIC(node.left) + \" \" + node.operator + \" \" + convertNodeIC(node.right);\n            break;\n        case 'LogicalExpression':\n            generatedIC = convertNodeIC(node.left) + \" \" + node.operator + \" \" + convertNodeIC(node.right);\n            break;\n        default:\n            console.log(\"DEBUG: \", node);\n            generatedIC = \"Unsupported\";\n            break;\n    }\n    return generatedIC;\n}\n\nfunction convertNodeObject(node) {\n    return convertNodeIC(node);\n}\n\n\n//# sourceURL=webpack:///./src/convertIC.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert */ \"./src/convert.js\");\n/* harmony import */ var _input_examples_while_loop_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../input_examples/while_loop.json */ \"./input_examples/while_loop.json\");\nvar _input_examples_while_loop_json__WEBPACK_IMPORTED_MODULE_1___namespace = /*#__PURE__*/Object.assign({}, _input_examples_while_loop_json__WEBPACK_IMPORTED_MODULE_1__, {\"default\": _input_examples_while_loop_json__WEBPACK_IMPORTED_MODULE_1__});\n/* harmony import */ var _input_examples_assign_expr_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../input_examples/assign_expr.json */ \"./input_examples/assign_expr.json\");\nvar _input_examples_assign_expr_json__WEBPACK_IMPORTED_MODULE_2___namespace = /*#__PURE__*/Object.assign({}, _input_examples_assign_expr_json__WEBPACK_IMPORTED_MODULE_2__, {\"default\": _input_examples_assign_expr_json__WEBPACK_IMPORTED_MODULE_2__});\n/* harmony import */ var _input_examples_for_loop_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../input_examples/for_loop.json */ \"./input_examples/for_loop.json\");\nvar _input_examples_for_loop_json__WEBPACK_IMPORTED_MODULE_3___namespace = /*#__PURE__*/Object.assign({}, _input_examples_for_loop_json__WEBPACK_IMPORTED_MODULE_3__, {\"default\": _input_examples_for_loop_json__WEBPACK_IMPORTED_MODULE_3__});\n/* harmony import */ var _input_examples_if_else_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../input_examples/if_else.json */ \"./input_examples/if_else.json\");\nvar _input_examples_if_else_json__WEBPACK_IMPORTED_MODULE_4___namespace = /*#__PURE__*/Object.assign({}, _input_examples_if_else_json__WEBPACK_IMPORTED_MODULE_4__, {\"default\": _input_examples_if_else_json__WEBPACK_IMPORTED_MODULE_4__});\n/* harmony import */ var _input_examples_do_while_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../input_examples/do_while.json */ \"./input_examples/do_while.json\");\nvar _input_examples_do_while_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/Object.assign({}, _input_examples_do_while_json__WEBPACK_IMPORTED_MODULE_5__, {\"default\": _input_examples_do_while_json__WEBPACK_IMPORTED_MODULE_5__});\n/* harmony import */ var _input_examples_expression_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../input_examples/expression.json */ \"./input_examples/expression.json\");\nvar _input_examples_expression_json__WEBPACK_IMPORTED_MODULE_6___namespace = /*#__PURE__*/Object.assign({}, _input_examples_expression_json__WEBPACK_IMPORTED_MODULE_6__, {\"default\": _input_examples_expression_json__WEBPACK_IMPORTED_MODULE_6__});\n/* harmony import */ var _visualize__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./visualize */ \"./src/visualize.js\");\n/* harmony import */ var _convertIC__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./convertIC */ \"./src/convertIC.js\");\n/* harmony import */ var _intercleanup__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./intercleanup */ \"./src/intercleanup.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n\n//import while_loop from '../input_examples/while_loop.json';\n\n\n\n\n\n\n\n\n\n\n\nfunction display(input_obj){\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_10__[\"cleanupGenerators\"])();\n    $(\"#basic-example\").innerHTML = \"\";\n    $(\"#output\").innerHTML = \"\";\n    $(\"#icg-pane\").innerHTML = \"\";\n    let output = Object(_convert__WEBPACK_IMPORTED_MODULE_0__[\"convertAll\"])(input_obj);\n    // console.log(JSON.stringify(output, null, 2))\n    let cleanInter = Object(_intercleanup__WEBPACK_IMPORTED_MODULE_9__[\"cleanUp\"])(output);\n    console.log(JSON.stringify(cleanInter, null, 2))\n    let icout = Object(_convertIC__WEBPACK_IMPORTED_MODULE_8__[\"convertNodeObject\"])(cleanInter);\n    console.log(icout);\n    //let output = while_loop;\n    var chart_config = Object(_visualize__WEBPACK_IMPORTED_MODULE_7__[\"getChartConfig\"])(input_obj);\n    new Treant(chart_config);\n    console.log(\"output\");\n    console.log(output);\n    var ir_chart_config = Object(_visualize__WEBPACK_IMPORTED_MODULE_7__[\"getIntermediateChartConfig\"])(output);\n    new Treant(ir_chart_config);\n\n    document.getElementById('icg-pane').innerText = icout;\n    document.getElementById('icg-pane').setAttribute(\"align\",\"center\");\n}\ndisplay(_input_examples_do_while_json__WEBPACK_IMPORTED_MODULE_5__);\n\n$(\"#for\").on('click', () => display(_input_examples_for_loop_json__WEBPACK_IMPORTED_MODULE_3__));\n$(\"#while\").on('click', () => display(_input_examples_while_loop_json__WEBPACK_IMPORTED_MODULE_1__));\n$(\"#do_while\").on('click', () => display(_input_examples_do_while_json__WEBPACK_IMPORTED_MODULE_5__));\n$(\"#if_else\").on('click', () => display(_input_examples_if_else_json__WEBPACK_IMPORTED_MODULE_4__));\n$(\"#expression\").on('click', () => display(_input_examples_expression_json__WEBPACK_IMPORTED_MODULE_6__));\n$(\"#assign_expr\").on('click', () => display(_input_examples_assign_expr_json__WEBPACK_IMPORTED_MODULE_2__));\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/intercleanup.js":
/*!*****************************!*\
  !*** ./src/intercleanup.js ***!
  \*****************************/
/*! exports provided: cleanUp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cleanUp\", function() { return cleanUp; });\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\n\n\n\n\n/**\n *  Intermediate node is cleaned removing extra labels\n *  @param   node The node to convert(JS object)\n *  @return       An array of nodes repesenting the simplified construct\n */\n\n\n function cleanNode(node){\n    var tempLabel = \"\";\n    var child;\n    switch(node.type){\n        case 'LabeledStatement':\n            if(node.body.type == \"Sequence\" || node.body.type == \"SequenceExpression\"){\n                child = node.body.statements;\n                if(child[0].type == \"LabeledStatement\"){\n                    child[0].inherited = true;\n                    tempLabel += child[0].label;\n                    child[0].label = node.label;\n                    var i;\n                    for(i = 0;i < child.length;i++){\n                        if(child[i].label == tempLabel){\n                            child[i].label = node.label;\n                        }\n                    }\n                }\n            }\n    }\n    return node;\n }\n\n\n function cleanUp(node){\n    // console.log(node); \n    var cleanedNode = node.statements.map(e => cleanNode(e));\n    // console.log(cleanedNode);\n    return node;\n }\n\n//# sourceURL=webpack:///./src/intercleanup.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: cleanupGenerators, GenLabel, genTemp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cleanupGenerators\", function() { return cleanupGenerators; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GenLabel\", function() { return GenLabel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genTemp\", function() { return genTemp; });\nvar labelCount = 0;\nvar tempCount = 0;\n\nfunction cleanupGenerators() {\n    labelCount = 0;\n    tempCount = 0;\n}\n/**\n *  Create a new label\n *  @param  name Custom label name, optional\n *  @return      A string\n */\nfunction GenLabel(name) {\n    if (name == null)\n        return `L${labelCount++}`;\n    else\n        return name;\n    }\n\nfunction genTemp(name) {\n    let temp = {\n        type: \"Identifier\",\n        name: null\n    }\n    if (name == null)\n        temp.name = `t${tempCount++}`;\n    else\n        temp.name = name;\n    return temp;\n}\n\nfunction gen(...args) {\n    let output = \"\";\n    args.map((arg) => {\n        if (typeof arg == 'object')\n            //do something here\n            return name;\n        else\n            return arg;\n        }\n    );\n    return args.join(\"\");\n}\n\n\n//# sourceURL=webpack:///./src/utils.js?");

/***/ }),

/***/ "./src/visualize.js":
/*!**************************!*\
  !*** ./src/visualize.js ***!
  \**************************/
/*! exports provided: draw, getChartConfig, getIntermediateChartConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"draw\", function() { return draw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getChartConfig\", function() { return getChartConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getIntermediateChartConfig\", function() { return getIntermediateChartConfig; });\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var treant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! treant-js */ \"./node_modules/treant-js/Treant.js\");\n/* harmony import */ var treant_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(treant_js__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction draw(node) {\n    var chart_config = getChartConfig(node);\n    console.log(chart_config);\n    new treant_js__WEBPACK_IMPORTED_MODULE_1__[\"Treant\"](chart_config);\n\n}\n\n// Convert the input JSON to a TreeModel object\nfunction getChartConfig(node) {\n    return {\n        chart: {\n            container: \"#basic-example\",\n            rootOrientation: \"NORTH\",\n\n            node: {\n                HTMLclass: \"node\"\n            },\n            connectors: {\n                type: \"straight\",\n                style: {\n                    \"stroke-width\": 1,\n                    \"stroke\": \"#ccc\"\n                }\n            }\n        },\n        nodeStructure: getNodeStructure(node)\n    };\n}\n\n\n// Convert the input JSON to a TreeModel object\nfunction getIntermediateChartConfig(node) {\n    return {\n        chart: {\n            container: \"#output\",\n            rootOrientation: \"NORTH\",\n\n            node: {\n                HTMLclass: \"node\"\n            },\n            connectors: {\n                type: \"straight\",\n                style: {\n                    \"stroke-width\": 1,\n                    \"stroke\": \"#ccc\"\n                }\n            }\n        },\n        nodeStructure: getNodeStructure(node)\n    };\n}\n\nfunction getNodeStructure(node) {\n    switch (node.type) {\n        case \"Identifier\":\n            return {\n                text: {\n                    name: `${node.name}`\n                }\n            };\n\n        case \"Literal\":\n            return {\n                text: {\n                    name: `${node.value}`\n                }\n            };\n\n        case \"SingleAssignmentExpression\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    getNodeStructure(node.target),\n                    getNodeStructure(node.operand1)\n                ]\n            };\n        case \"ArrayExpression\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: node.elements.map(e => getNodeStructure(e))\n            };\n        case \"UnaryExpression\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    {\n                        text: {\n                            name: node.operator\n                        }\n                    },\n                    getNodeStructure(node.argument)\n                ]\n            };\n\n        case \"BinaryExpression\":\n        case \"LogicalExpression\":\n        case \"ConditionalExpression\":\n        case \"AssignmentExpression\":\n            return {\n                text: {\n                    name: node.operator\n                },\n                children: [\n                    getNodeStructure(node.left),\n                    getNodeStructure(node.right)\n                ]\n            };\n        case \"Sequence\":\n            // console.log(node);\n            return {\n                text: {\n                    name: node.type\n                },\n                children: node.statements.map(e => getNodeStructure(e))\n            };\n        case \"SequenceExpression\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: node.statements.map(e => getNodeStructure(e))\n            };\n        case \"ExpressionStatement\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [getNodeStructure(node.expression)]\n            };\n        case \"BlockStatement\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: node.body.map(e => getNodeStructure(e))\n            };\n        case \"BreakStatement\":\n            return {\n                text: {\n                    name: `break: ${node.label}`\n                }\n            };\n        case \"ContinueStatement\":\n            return {\n                text: {\n                    name: `Identifier: ${node.label}`\n                }\n            };\n        case \"DoWhileStatement\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    getNodeStructure(node.body),\n                    getNodeStructure(node.test)\n                ]\n            };\n        case \"EmptyStatement\":\n            return {\n                text: {\n                    name: `EmptyStatement`\n                }\n            };\n\n        case \"ForStatement\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    getNodeStructure(node.init),\n                    getNodeStructure(node.test),\n                    getNodeStructure(node.update),\n                    getNodeStructure(node.body)\n                ]\n            };\n        case \"WhileStatement\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    getNodeStructure(node.test),\n                    getNodeStructure(node.body)\n                ]\n            };\n        case \"IfStatement\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    getNodeStructure(node.test),\n                    getNodeStructure(node.consequent),\n                    getNodeStructure(node.alternative)\n                ]\n            };\n\n            //Addition here\n        case \"IfGotoStatement\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    getNodeStructure(node.test),\n                    {\n                        text: {\n                            name: `label: ${node.label}`\n                        }\n                    }\n                ]\n            };\n\n        case \"LabeledStatement\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    {\n                        text: {\n                            name: `label: ${node.label}`\n                        }\n                    },\n                    getNodeStructure(node.body)\n                ]\n            };\n        case \"ReturnStatement\":\n            if (node.argument == null)\n                var c = {\n                    text: {\n                        name: \"((None))\"\n                    }\n                }\n            else\n                var c = getNodeStructure(node.argument)\n            return {\n                text: {\n                    name: node.type,\n                    children: c\n                }\n            };\n        case \"VariableDeclaration\":\n            var c = {\n                text: {\n                    name: node.type\n                },\n                children: node.declarations.map(e => getNodeStructure(e))\n            };\n            c.children.unshift({\n                text: {\n                    name: node.kind\n                }\n            });\n            return c;\n\n        case \"VariableDeclarator\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    getNodeStructure(node.var_id),\n                    getNodeStructure(node.init)\n                ]\n            };\n\n        case \"GotoStatement\":\n            return {\n                text: {\n                    name: node.type\n                },\n                children: [\n                    {\n                        text: {\n                            name: node.label\n                        }\n                    }\n                ]\n            };\n        default:\n            console.error(`getNodeStructure: ${node.type} not supported`);\n            return {\n                text: {\n                    name: \"Unsupported\"\n                }\n            };\n    }\n}\n\n\n//# sourceURL=webpack:///./src/visualize.js?");

/***/ })

/******/ });