
> ir_generator@0.0.1 start /home/hybrid/Documents/Projects/ir_generator
> node src/index.js

Read input:
{ type: 'WhileStatement',
  test: 
   { type: 'BinaryExpression',
     left: { type: 'Identifier', name: 'a' },
     right: { type: 'Literal', kind: 'int', value: '10' },
     operator: '<' },
  body: 
   { type: 'AssignmentExpression',
     operator: '=',
     left: { type: 'Identifier', name: 'a' },
     right: { type: 'ExpressionStatement', expression: [Object] } } }

Output(long form):
{
    "type": "Sequence",
    "statements": [
        {
            "type": "LabeledStatement",
            "body": {
                "type": "IfGotoStatement",
                "test": {
                    "type": "BinaryExpression",
                    "left": {
                        "type": "Identifier",
                        "name": "a"
                    },
                    "right": {
                        "type": "Literal",
                        "kind": "int",
                        "value": "10"
                    },
                    "operator": "<"
                },
                "label": "L1"
            },
            "label": "L0"
        },
        {
            "type": "GotoStatement",
            "label": null
        },
        {
            "type": "LabeledStatement",
            "label": "L1",
            "body": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                    "type": "Identifier",
                    "name": "a"
                },
                "right": {
                    "type": "ExpressionStatement",
                    "expression": {
                        "type": "BinaryExpression",
                        "left": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "right": {
                            "type": "Literal",
                            "kind": "int",
                            "value": "10"
                        },
                        "operator": "+"
                    }
                }
            }
        },
        {
            "type": "GotoStatement",
            "label": "L0"
        },
        {
            "type": "LabeledStatement",
            "label": "L2",
            "body": {
                "type": "EmptyStatement"
            }
        }
    ]
}

Output(short form):
{ type: 'Sequence',
  statements: 
   [ { type: 'LabeledStatement', body: [Object], label: 'L0' },
     { type: 'GotoStatement', label: null },
     { type: 'LabeledStatement', label: 'L1', body: [Object] },
     { type: 'GotoStatement', label: 'L0' },
     { type: 'LabeledStatement', label: 'L2', body: [Object] } ] }


Read assign input:
{ type: 'AssignmentExpression',
  operator: '=',
  left: { type: 'Identifier', name: 'i' },
  right: 
   { type: 'ExpressionStatement',
     expression: 
      { type: 'BinaryExpression',
        left: [Object],
        right: [Object],
        operator: '+' } } }

Output(long form):
{
    "type": "Sequence",
    "statements": [
        {
            "type": "SingleAssignmentExpression",
            "target": "t0",
            "operand1": {
                "type": "ExpressionStatement",
                "expression": {
                    "type": "BinaryExpression",
                    "left": {
                        "type": "Identifier",
                        "name": "i"
                    },
                    "right": {
                        "type": "Literal",
                        "kind": "int",
                        "value": "1"
                    },
                    "operator": "+"
                }
            }
        },
        {
            "type": "SingleAssignmentExpression",
            "target": {
                "type": "Identifier",
                "name": "i"
            },
            "operand1": "t0"
        }
    ]
}

Output(short form):
{ type: 'Sequence',
  statements: 
   [ { type: 'SingleAssignmentExpression',
       target: 't0',
       operand1: [Object] },
     { type: 'SingleAssignmentExpression',
       target: [Object],
       operand1: 't0' } ] }
{ type: 'SingleAssignmentExpression',
  target: 't0',
  operand1: 
   { type: 'ExpressionStatement',
     expression: 
      { type: 'BinaryExpression',
        left: [Object],
        right: [Object],
        operator: '+' } } }
